#!/usr/bin/python3

import argparse
import os
import shutil
import subprocess
import sys

import ruamel.yaml

DEFAULT_CONFFILE = "/etc/modian/legacy.yaml"
DEFAULT_ISO = "/srv/iso/guest.iso"
DEFAULT_KERNEL = "$ISO.kernel"
DEFAULT_INITRD = "$ISO.initrd"
DEFAULT_CMDLINE = "boot=live config username=root hostname=controller persistent consoleblank=0 --"


class Fail(Exception):
    pass


class Config:
    def __init__(self, c_file=DEFAULT_CONFFILE):
        self.c_file = c_file
        self.data = self.defaults()

    def get(self, key, default=None):
        return self.data.get(key, default)

    def defaults(self):
        return {
            "iso": DEFAULT_ISO,
            "kernel": DEFAULT_KERNEL,
            "initrd": DEFAULT_INITRD,
            "cmdline": DEFAULT_CMDLINE,
            "persistence": "/srv/persistence.qcow2",
            "persistence_size": None,
            "persistence_parted":
                "/etc/modian/partitions/systemdisk-uefi.parted",
            "hda": None,
            "hdb": None,
            "hdc": None,
            "hdd": None,
        }

    def read_file(self, c_file=None):
        yaml = ruamel.yaml.YAML(typ="safe")
        with open(c_file or self.c_file) as fp:
            data = yaml.load(fp)
        for key in self.data:
            value = data.get(key, None)
            if value:
                self.data[key] = value

    def read_args(self, args):
        for key in self.data:
            value = getattr(args, key, None)
            if value:
                self.data[key] = value


def main():
    parser = argparse.ArgumentParser(description="Run modian legacy guest image")
    parser.add_argument("--config", metavar="file.conf", action="store", default=DEFAULT_CONFFILE,
                        help="Modian Legacy configuration file")
    parser.add_argument("--iso", metavar="file.iso", action="store",
                        help=f"ISO image to start. Default: {DEFAULT_ISO}")
    parser.add_argument("--kernel", metavar="vmlinuz", action="store",
                        help=f"kernel image to boot. Default: {DEFAULT_KERNEL}")
    parser.add_argument("--initrd", metavar="initrd.img", action="store",
                        help=f"initrd image to boot. Default: {DEFAULT_INITRD}")
    parser.add_argument("--cmdline", action="store",
                        help=f"Kernel command line. Default: {DEFAULT_CMDLINE!r}")
    parser.add_argument("--persistence", action="store",
                        help="path to the persistence disk")
    parser.add_argument("--persistence-size", metavar="SIZE", action="store",
                        help="path to the persistence disk"
                        "(either a size in the format used by qemu-img "
                        "or a percentage of free space)")
    parser.add_argument("--persistence-parted", action="store",
                        help="parted schema of the persistence disk")
    parser.add_argument("--hda", metavar="hda", action="store",
                        help="path to the first disk (will be ignored if "
                        "persistence is set)")
    parser.add_argument("--hdb", metavar="hdb", action="store",
                        help="path to the second disk")
    parser.add_argument("--hdc", metavar="hdc", action="store",
                        help="path to the third disk")
    parser.add_argument("--hdd", metavar="hdd", action="store",
                        help="path to the fourth disk")
    parser.add_argument("--nic", action="append",
                        help="network configuration passed to qemu")
    args = parser.parse_args()

    config = Config(args.config)
    config.read_file()
    config.read_args(args)

    kvm = shutil.which("kvm")

    iso = config.get("iso")
    if not os.path.exists(iso):
        raise Fail(f"{iso} not found")

    # if the persistence file does not exist, and is not None, we create it
    # TODO
    persistence = config.get("persistence")
    if persistence and not os.path.exists(persistence):

        # file size, accepting a value as percentage of free space
        p_size = config.get("persistence_size")
        if p_size.strip().endswith("%"):
            try:
                percent = int(p_size[:-1])
            except ValueError:
                parser.print_help()
                exit(1)
            free_size = shutil.disk_usage(os.path.dirname(persistence)).free
            p_size = str(free_size * percent // 100)

        # disk creation
        subprocess.run([
            "qemu-img",
            "create",
            "-f", "qcow2",
            persistence,
            p_size,
        ], check=True)

        # partitioning disk
        subprocess.run(["modprobe", "nbd", "max_part=8"])
        subprocess.run(["qemu-nbd", "--connect=/dev/nbd0", persistence])

        with open(config.get("persistence_parted")) as fp:
            cmd = [
                "parted",
                "-s",
                "-a", "optimal",
                "/dev/nbd0",
                "--",
            ] + fp.read().split()
            subprocess.run(cmd)

        subprocess.run([
            "mkfs.ext4",
            "-O^metadata_csum,64bit",
            "-L", "live-rw",
            "/dev/nbd0p1"
        ])
        subprocess.run(["mkswap", "/dev/nbd0p2"])
        subprocess.run([
            "mkfs.ext4",
            "-O^metadata_csum,64bit",
            "-L", "##log##",
            "/dev/nbd0p3"
        ])
        subprocess.run(["qemu-nbd", "--disconnect", "/dev/nbd0"])
        subprocess.run(["rmmod", "nbd"])

    # Prepare to run the image
    kernel = config.get("kernel").replace("$ISO", iso)
    initrd = config.get("initrd").replace("$ISO", iso)

    # Extract kernel and initrd from ISO files if needed
    if not os.path.exists(kernel):
        res = subprocess.run(["bsdtar", "xqOf", iso, "live/vmlinuz"], stdout=subprocess.PIPE, check=True)
        with open(kernel, "wb") as fd:
            fd.write(res.stdout)
    if not os.path.exists(initrd):
        res = subprocess.run(["bsdtar", "xqOf", iso, "live/initrd.img"], stdout=subprocess.PIPE, check=True)
        with open(initrd, "wb") as fd:
            fd.write(res.stdout)

    cmd = [
        kvm,
        "-kernel", kernel,
        "-initrd", initrd,
        "-cdrom", iso,
        "-m", "12G",
        "-smp", "12",
        "-append", config.get("cmdline"),
        "-full-screen", "-vga", "virtio", "-usb", "-device", "usb-tablet",
    ]
    disks = "abcd"
    persistence = config.get("persistence")
    if persistence is not None:
        cmd.append("-hda")
        cmd.append(persistence)
        disks = "bcd"
    for letter in disks:
        d_name = "hd"+letter
        d_path = config.get(d_name)
        if d_path:
            cmd.append("-"+d_name)
            cmd.append(d_path)
    for line in config.get("nic", []):
        cmd.append("-nic")
        cmd.append(line)

    print("Running command:", " ".join(cmd))

    os.execvp(kvm, cmd)


if __name__ == "__main__":
    try:
        sys.exit(main())
    except Fail as e:
        print(str(e), file=sys.stderr)
        sys.exit(1)
